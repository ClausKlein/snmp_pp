/*_############################################################################
  _##
  _##  cmake_libsnmp.h.in
  _##
  _##  SNMP++ v3.4
  _##  -----------------------------------------------
  _##  Copyright (c) 2001-2021 Jochen Katz, Frank Fock
  _##
  _##  This software is based on SNMP++2.6 from Hewlett Packard:
  _##
  _##    Copyright (c) 1996
  _##    Hewlett-Packard Company
  _##
  _##  ATTENTION: USE OF THIS SOFTWARE IS SUBJECT TO THE FOLLOWING TERMS.
  _##  Permission to use, copy, modify, distribute and/or sell this software
  _##  and/or its documentation is hereby granted without fee. User agrees
  _##  to display the above copyright notice and this license notice in all
  _##  copies of the software and any documentation of the software. User
  _##  agrees to assume all liability for the use of the software;
  _##  Hewlett-Packard, Frank Fock, and Jochen Katz make no representations
  _##  about the suitability of this software for any purpose. It is provided
  _##  "AS-IS" without warranty of any kind, either express or implied. User
  _##  hereby grants a royalty-free license to any and all derivatives based
  _##  upon this software code base.
  _##
  _##########################################################################*/
#ifndef __LIBSNMP_H_INCLUDED__
#define __LIBSNMP_H_INCLUDED__

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#cmakedefine _DEBUG

#cmakedefine CNF_HAVE_SYS_TYPES_H
#ifdef CNF_HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#cmakedefine CNF_HAVE_SYS_STAT_H
#ifdef CNF_HAVE_SYS_STAT_H
# include <sys/stat.h>
#endif

#include <cctype>
#include <cerrno>
#include <cinttypes>
#include <climits>
#include <csignal>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <memory>
#include <string> // std::stoi() used

#cmakedefine CNF_HAVE_UNISTD_H
#cmakedefine CNF_HAVE_SYS_UNISTD_H
#ifdef CNF_HAVE_UNISTD_H
# include <unistd.h>
#else
# ifdef CNF_HAVE_SYS_UNISTD_H
#  include <sys/unistd.h>
# endif
#endif

#cmakedefine CNF_HAVE_SYS_TIME_H
#ifdef CNF_HAVE_SYS_TIME_H
#include <sys/time.h>
#endif
#cmakedefine CNF_HAVE_SYS_PARAM_H
#ifdef CNF_HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
#cmakedefine CNF_HAVE_SYS_TIMEB_H
#ifdef CNF_HAVE_SYS_TIMEB_H
#include <sys/timeb.h> // and _ftime
#endif

#cmakedefine CNF_HAVE_WINSOCK2_H
#cmakedefine CNF_HAVE_WS2TCPIP_H
#cmakedefine CNF_HAVE_WSPIAPI_H
#cmakedefine CNF_HAVE_NETDB_H
#cmakedefine CNF_HAVE_SYS_SOCKET_H
#cmakedefine CNF_HAVE_ARPA_INET_H
#cmakedefine CNF_HAVE_NETINET_IN_H

#ifdef CNF_HAVE_WINSOCK2_H
# include <winsock2.h>
# ifdef CNF_HAVE_WS2TCPIP_H
#  include <ws2tcpip.h>
# endif
# ifdef CNF_HAVE_WSPIAPI_H
#  include <wspiapi.h>
# endif
#else
# ifdef CNF_HAVE_NETDB_H
#  include <netdb.h>
# endif
# ifdef CNF_HAVE_SYS_SOCKET_H
#  include <sys/socket.h>
# endif
# ifdef CNF_HAVE_ARPA_INET_H
#  include <arpa/inet.h>
# endif
# ifdef CNF_HAVE_NETINET_IN_H
#  include <netinet/in.h>
# endif
#endif

#cmakedefine CNF_HAVE_POLL_H
#cmakedefine CNF_HAVE_SYS_SELECT_H
#ifdef CNF_HAVE_POLL_H
# include <poll.h>
#endif
#ifdef CNF_HAVE_SYS_SELECT_H
# include <sys/select.h>
#endif

#cmakedefine CNF_HAVE_IO_H
#cmakedefine CNF_HAVE_PROCESS_H
#ifdef _WIN32
# ifdef CNF_HAVE_IO_H
#  include <io.h>
# endif
# ifdef CNF_HAVE_PROCESS_H
#  include <process.h>
# endif
# include <windows.h>
#endif

#cmakedefine CNF_HAVE_STRCASECMP
#cmakedefine CNF_HAVE_STRICMP
#if !defined(CNF_HAVE_STRCASECMP)
# ifdef CNF_HAVE_STRICMP
#  define strcasecmp stricmp
# else
extern "C" int strcasecmp(const char *s1, const char *s2);
# endif
#endif

#cmakedefine CNF_HAVE_GETPID
#cmakedefine CNF_HAVE__GETPID
#if !defined(CNF_HAVE_GETPID)
# ifdef CNF_HAVE__GETPID
#  define getpid _getpid
# endif
#endif

#cmakedefine CNF_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY


#if !(defined(__APPLE__) || defined(__BSD__))
#include <cassert>

namespace {

// see https://www.freebsd.org/cgi/man.cgi?query=strlcat&sektion=3
// and
// https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/strncpy-and-strncat

/// Like snprintf(3), the strlcpy() and strlcat() functions return the
/// total length of the string they tried to create.
inline size_t strlcpy(char* dst, const char* src, size_t capacity)
{
    assert(dst != nullptr);
    return snprintf(dst, capacity, "%s", src);
}

/// If the return value is >= capacity, the output string has been
/// truncated.  It is the caller's responsibility to handle this
inline size_t strlcat(char* dst, const char* src, size_t capacity)
{
    assert(dst != nullptr);
    size_t actual_used = strlen(dst);
    assert(actual_used < capacity);

    if (capacity > (actual_used + 1)) {
        return strlcpy(dst + actual_used, src, capacity - actual_used);
    }

    return actual_used + strlen(src); // NOTE: total_len
}

} // namespace
#endif

#endif /* __LIBSNMP_H_INCLUDED__ */
